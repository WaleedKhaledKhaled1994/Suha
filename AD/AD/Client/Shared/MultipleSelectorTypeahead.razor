@typeparam entity

<TypeAhead 
           SearchMethod="@((string searchText) => SearchMethod(searchText))"
           ValueChanged="@((entity item) => SelectedElement(item))">
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
</TypeAhead>

<ul class="list-group">
    @foreach (var item in SelectedElements)
    {
        <li class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick="@(() => SelectedElements.Remove(item))" class="badge-primary badge-pill" style="cursor:pointer">X</span>
        </li>

        @*<li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick="@(() => SelectedElements.Remove(item))" class="badge-primary badge-pill" style="cursor:pointer">X</span>
        </li>*@
    }
</ul>

@code {
    [Parameter] public List<entity> SelectedElements { get; set; } = new List<entity>();
    [Parameter] public Func<string, Task<IEnumerable<entity>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<entity> MyResultTemplate { get; set; }
    [Parameter] public RenderFragment<entity> MyListTemplate { get; set; }

    private void SelectedElement(entity item)
    {
        if (!SelectedElements.Any(x => x.Equals(item)))
        {
            SelectedElements.Add(item);
        }
    }

    //T draggedItem;
    //private void HandleDragStart(T item)
    //{
    //    draggedItem = item;
    //}

    //private void HandleDragOver(T item)
    //{
    //    if (!item.Equals(draggedItem))
    //    {
    //        var dragElementIndex = SelectedElements.IndexOf(draggedItem);
    //        var elementIndex = SelectedElements.IndexOf(item);
    //        SelectedElements[elementIndex] = draggedItem;
    //        SelectedElements[dragElementIndex] = item;
    //    }
    //}
}

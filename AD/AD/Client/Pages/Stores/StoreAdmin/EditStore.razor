@page "/store/edit/{entityId:long}"

@inject IStoreRepository _storeRepository
@inject ITagRepository _tagRepository
@inject ICountryRepository _countryRepository
@inject ICityRepository _cityRepository

@attribute [Authorize(Roles = "User")]

@if (entity != null)
{
    <StoreForm entity="entity" Action="@T["Action_Edit"]"
               onValidSubmit="Edit"
               SelectedCurrencyValue="SelectedCurrencyValue"
               SelectedUsersC="SelectedUsersC"
               NotSelectedTags="NotSelectedTags"
               SelectedTags="SelectedTags"
               NotSelectedCountries="NotSelectedCountries"
               SelectedCountries="SelectedCountries"
               NotSelectedCities="NotSelectedCities"
               SelectedCities="SelectedCities"
               SelectedPaymentMethods="SelectedPaymentMethods"
               isBusy="isBusy" />
}
@code {
    [Parameter] public long entityId { get; set; }
    public Store entity;
    bool isBusy = false;

    public long SelectedCurrencyValue { get; set; }
    public List<UserC> SelectedUsersC { get; set; } = new List<UserC>();

    public List<Tag> SelectedTags { get; set; } = new List<Tag>();
    public List<Tag> NotSelectedTags { get; set; } = new List<Tag>();

    public List<Country> SelectedCountries { get; set; } = new List<Country>();
    public List<Country> NotSelectedCountries { get; set; } = new List<Country>();

    public List<City> SelectedCities { get; set; } = new List<City>();
    public List<City> NotSelectedCities { get; set; } = new List<City>();

    private List<StorePaymentMethods> SelectedPaymentMethods = new List<StorePaymentMethods>();

    protected async override Task OnInitializedAsync()
    {
        entity = await _storeRepository.Get(entityId);
        if (entity == null)
        {
            _navigationManager.NavigateTo("NotFound");
            return;
        }

        var userRoles = await _roleRepository.GetRolesForStore(entityId);
        if (!userRoles.Contains(EmployeeRole.Admin))
            _navigationManager.NavigateTo("NotFound");

        SelectedCurrencyValue = entity.CurrencyId;
        foreach (var item in entity.StoreUsers)
            SelectedUsersC.Add(item.User);
        foreach (var item in entity.StoreTags)
            SelectedTags.Add(item.Tag);
        foreach (var item in entity.StoreCountries)
            SelectedCountries.Add(item.Country);
        foreach (var item in entity.StoreCities)
            SelectedCities.Add(item.City);
        foreach (var item in entity.StorePaymentMethods)
            SelectedPaymentMethods.Add(item);

        List<long> SelectedTagsIds = SelectedTags.Select(x => x.Id).ToList();
        List<long> SelectedCountriesIds = SelectedCountries.Select(x => x.Id).ToList(); ;
        List<long> SelectedCitiesIds = SelectedCities.Select(x => x.Id).ToList(); ;

        NotSelectedTags = (await _tagRepository.Get()).Where(x => !SelectedTagsIds.Contains(x.Id)).ToList();
        NotSelectedCountries = (await _countryRepository.Get()).Where(x => !SelectedCountriesIds.Contains(x.Id)).ToList();
        NotSelectedCities = (await _cityRepository.Get()).Where(x => !SelectedCitiesIds.Contains(x.Id)).ToList();
    }

    private async Task Edit()
    {
        try
        {
            isBusy = true;
            EditStoreVMRequest StoreVM = new()
            {
                Id = entity.Id,
                Name = entity.Name,
                Address = entity.Address,
                CityId = entity.CityId,
                CurrencyId = entity.CurrencyId,
                Image = entity.Image,
                Tags = entity.StoreTags.Select(x => x.TagId).ToList(),
                Countries = entity.StoreCountries.Select(x => x.CountryId).ToList(),
                Cities = entity.StoreCities.Select(x => x.CityId).ToList(),
                PaymentMethods = entity.StorePaymentMethods.Select(x => new PaymentMethodDTO { PaymentMethodId = x.PaymentMethodId, Details = x.Details }).ToList()
            };

            await _storeRepository.Edit(StoreVM);
            _navigationManager.NavigateTo($"/myStores");
            Toaster.Info(T["Message_Update"]);
        }
        catch (Exception)
        {
            isBusy = false;

            Toaster.Error(T["Message_Error"]);
        }
    }
}

@inject ICountryRepository _countryRepository

@attribute [Authorize(Roles = "Admin")]

<div class="page-content-wrapper">
    <div class="container">
        <div class="profile-wrapper-area py-3">
            <div class="card user-info-card">
                <div class="card-body p-4 d-flex align-items-center">
                    <div class="user-info">
                        <h3>@Action @T["Class_City"]</h3>
                    </div>
                </div>
            </div>
            <div class="card user-data-card">
                <div class="card-body">
                    <EditForm Model="entity" OnValidSubmit="onValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>@T["Class_Country"]:</label>
                            <div>
                                <select class="form-control" @bind="@entity.CountryId">
                                    <option value="0">
                                        @T["Action_Select"]
                                    </option>
                                    @foreach (var item in countries)
                                    {
                                        <option value="@item.Id">
                                            @_localizationDB.GetName(item)
                                        </option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => entity.CountryId)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Name_en"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Name_en" />
                                <ValidationMessage For="@(() => entity.Name_en)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Name_ar"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Name_ar" />
                                <ValidationMessage For="@(() => entity.Name_ar)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Name_fr"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Name_fr" />
                                <ValidationMessage For="@(() => entity.Name_fr)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Name_ru"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Name_tr" />
                                <ValidationMessage For="@(() => entity.Name_tr)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Name_tr"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Name_ru" />
                                <ValidationMessage For="@(() => entity.Name_ru)" />
                            </div>
                        </div>
                        <button class="btn btn-success" disabled=@isBusy type="submit">@T["Action_Save"]</button>
                        <a class="btn btn-primary" href="cities">@T["Action_Back_To_List"]</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public City entity { get; set; }
    [Parameter] public string Action { get; set; }
    [Parameter] public EventCallback onValidSubmit { get; set; }
    [Parameter] public bool isBusy { get; set; }

    List<Country> countries = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        countries = await _countryRepository.Get();
    }
}
@page "/store/{storeId:long}/employee/add"

@inject IStoreUserRepository _entityRepository
@inject IUserCRepository _userCRepository
@inject IStoreUserRepository _storeUserRepository

@attribute [Authorize(Roles = "User")]

<div class="page-content-wrapper">
    <div class="container">
        <div class="profile-wrapper-area py-3">
            <div class="card user-info-card">
                <div class="card-body p-4 d-flex align-items-center">
                    <div class="user-info">
                        <h3>@T["Action_Add"] @T["Class_Employee"]</h3>
                    </div>
                </div>
            </div>
            <div class="card user-data-card">
                <div class="card-body">
                    <EditForm Model="entity" OnValidSubmit="Create">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>@T["Property_UserName"]:</label>
                            <Autocomplete TItem="UserC"
                                          Data="@users"
                                          TextField="@((item)=>item.UserName)"
                                          ValueField="@((item)=>item.Id)"
                                          SelectedValueChanged="@ChangeUserHandler"
                                          Placeholder=""
                                          MinLength="3" />
                        </div>
                        <div class="form-group">
                            <label>@T["Admin"]:</label>
                            <div>
                                <input type="checkbox" checked=@entity.Admin
                                       @onchange="eventArgs => { ChangeAdminHandler(eventArgs.Value); }" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Permission_ManageProducts"]:</label>
                            <div>
                                <input type="checkbox" checked=@entity.ManageProducts
                                       @onchange="eventArgs => { ChangeManageProductsHandler(eventArgs.Value); }" />
                                <ValidationMessage For="@(() => entity.ManageProducts)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Permission_ManageOrders"]:</label>
                            <div>
                                <input type="checkbox" checked=@entity.ManageOrders
                                       @onchange="eventArgs => { ChangeManageOrdersHandler(eventArgs.Value); }" />
                                <ValidationMessage For="@(() => entity.ManageOrders)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Permission_ManageComments"]:</label>
                            <div>
                                <input type="checkbox" checked=@entity.ManageComments
                                       @onchange="eventArgs => { ChangeManageCommentsHandler(eventArgs.Value); }" />
                                <ValidationMessage For="@(() => entity.ManageComments)" />
                            </div>
                        </div>
                        <button class="btn btn-success" disabled=@isBusy type="submit">@T["Action_Save"]</button>
                        <a class="btn btn-primary" href="/employees/@entity.StoreUser?.StoreId">@T["Action_Back_To_List"]</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter] public long storeId { get; set; }
    bool isBusy = false;
    private EmployeeDTO entity = new EmployeeDTO();

    private List<UserC> users = new List<UserC>();

    protected override async Task OnInitializedAsync()
    {
        var userRoles = await _roleRepository.GetRolesForStore(storeId);
        if (!userRoles.Contains(EmployeeRole.Admin))
            _navigationManager.NavigateTo("NotFound");

        users = await _storeUserRepository.GetUsersForAddEmployees(storeId);
        entity.StoreUser = new StoreUsers();
        entity.StoreUser.StoreId = storeId;
    }

    private void ChangeAdminHandler(object args)
    {
        if (args.ToString() == "True")
        {
            entity.Admin = true;
            entity.ManageProducts = true;
            entity.ManageOrders = true;
            entity.ManageComments = true;
        }
        else if (args.ToString() == "False")
        {
            entity.Admin = false;
        }
    }

    private void ChangeManageProductsHandler(object args)
    {
        if (args.ToString() == "True")
        {
            entity.ManageProducts = true;
        }
        else if (args.ToString() == "False")
        {
            entity.Admin = false;
            entity.ManageProducts = false;
        }
    }

    private void ChangeManageOrdersHandler(object args)
    {
        if (args.ToString() == "True")
        {
            entity.ManageOrders = true;
        }
        else if (args.ToString() == "False")
        {
            entity.Admin = false;
            entity.ManageOrders = false;
        }
    }

    private void ChangeManageCommentsHandler(object args)
    {
        if (args.ToString() == "True")
        {
            entity.ManageComments = true;
        }
        else if (args.ToString() == "False")
        {
            entity.Admin = false;
            entity.ManageComments = false;
        }
    }

    private void ChangeUserHandler(object newValue)
    {
        if (newValue != null)
        {
            entity.StoreUser.UserCId = (long)newValue;
        }
    }

    private async Task Create()
    {
        try
        {
            isBusy = true;

            await _entityRepository.Add(entity);
            Toaster.Success(T["Message_Add"]);

            _navigationManager.NavigateTo($"/employees/{storeId}");
        }
        catch (Exception ex)
        {
            isBusy = false;

            Toaster.Error(T["Message_Error"]);
            await _homeRepository.LogToDB(new LogDTO() { Page = _navigationManager.Uri, Message = ex.Message, StackTrace = ex.StackTrace, InnerException = ex.InnerException?.ToString() });
        }
    }
}

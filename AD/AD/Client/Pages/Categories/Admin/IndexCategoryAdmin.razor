@page "/categoriesAdmin"

@using AD.Shared.DTOs.Category

@inject ICategoryRepository _entityRepository

@attribute [Authorize(Roles = "Admin")]

<h3 style="text-align: center;">@T["NavMenu_Categories"]</h3>

<div class="form-inline">
    <div class="form-group">
        <a class="btn btn-info" href="category/create">@T["Action_Create"] @T["Class_Category"]</a>
        &nbsp;
        <a class="btn btn-success" href="freezedCategories">@T["NavMenu_FreezedCategories"]</a>
        &nbsp;&nbsp;&nbsp;
        <div class="form-group mb-2"><input @onchange="Search" class="form-control" placeholder="@T["Action_Search"]" /></div>
        <span class="text-muted ml-5">
            @T["Action_Search_Shwoing"] @entities.Count @T["Action_Search_OutOf"] @totalAmount
        </span>
    </div>
</div>


<GenericList List="entities">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>@T["Property_Code"]</th>
                    <th>@T["Property_CategoryLevel"]</th>
                    <th>@T["Property_Name"]</th>
                    <th>@T["Property_Description"]</th>
                    @*<th>@T["Property_UpperCategories"]</th>*@
                    <th>@T["Property_Image"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in entities)
                {
                    <tr>
                        <td>
                            @item.Category.Code
                        </td>
                        <td>
                            @item.Category.CategoryLevel
                        </td>
                        <td>
                            <a>@_localizationDB.GetName(item.Category)</a>
                        </td>
                        <td>
                            @_localizationDB.GetDescription(item.Category)
                        </td>
                        @*<td>
                                @foreach (var category in item.UpperCategories)
                                {
                                    @_localizationDB.GetName(category)
                                    <span>&nbsp;</span>
                                }
                            </td>*@
                        <td>
                            <img class="img-fluid img-thumbnail" alt="Category Image" src="@item.Category.Image" style="height:100px; width:100px;" />
                        </td>
                        <td>
                            <a class="btn btn-success" href="/category/edit/@item.Category.Id">@T["Action_Edit"]</a>
                            <a class="btn btn-info" href="/categoryAdmin/details/@item.Category.Id">@T["Action_Details"]</a>
                            <button class="btn btn-warning" @onclick="@(() => ShowModalFreeze(@item.Category.Id))">@T["Action_Freeze"]</button>
                            <button class="btn btn-danger" @onclick="@(() => ShowModal(@item.Category.Id))">@T["Action_Delete"]</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>
<AD.Client.Shared.Pagination CurrentPage="@paginationDTO.Page" SelectedPage="SelectedPage" TotalAmountPages="totalAmountOfPages"></AD.Client.Shared.Pagination>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    List<CategoryDTO> entities = new List<CategoryDTO>();

    PaginationSearchDTO paginationDTO = new PaginationSearchDTO() { RecordsPerPage = 8 };
    private int totalAmountOfPages;
    private long totalAmount;

    protected override async Task OnInitializedAsync()
    {
        await LoadEntities();
    }

    private async Task Search(ChangeEventArgs args)
    {
        paginationDTO.SearchText = args.Value.ToString();
        await LoadEntities();
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadEntities();
    }

    private async Task LoadEntities()
    {
        var paginatedResponse = await _entityRepository.GetAllCategoriesAdmin(paginationDTO);
        entities = paginatedResponse.Response;
        totalAmountOfPages = paginatedResponse.TotalAmountPages;
        totalAmount = paginatedResponse.TotalAmount;
    }

    private async Task ShowModalFreeze(long id)
    {
        var modal = Modal.Show<ConfirmDelete>(@T["Modal_Confirm_Freeze_Category"]);

        var result = await modal.Result;

        if (!result.Cancelled && (result.Data is bool accepted) && accepted)
        {
            try
            {
                FreezeVMRequest categoryVM = new()
                {
                    Id = id,
                    Status = Status.Offline,
                };
                await _entityRepository.Freeze_UnFreeze(categoryVM);
                await LoadEntities();
                Toaster.Success(T["Message_Category_Freeze"]);
            }
            catch (Exception ex)
            {
                Toaster.Error(T["Message_Error"]);
                await _homeRepository.LogToDB(new LogDTO() { Page = _navigationManager.Uri, Message = ex.Message, StackTrace = ex.StackTrace, InnerException = ex.InnerException?.ToString() });
            }
        }
    }

    private async Task ShowModal(long id)
    {
        var modal = Modal.Show<ConfirmDelete>(@T["Modal_Confirm_Delete"]);
        var result = await modal.Result;

        if (!result.Cancelled && (result.Data is bool accepted) && accepted)
        {
            try
            {
                await _entityRepository.Delete(id);
                await LoadEntities();
                Toaster.Error(T["Message_Delete"]);
            }
            catch (Exception ex)
            {
                Toaster.Error(T["Message_Error"]);
                await _homeRepository.LogToDB(new LogDTO() { Page = _navigationManager.Uri, Message = ex.Message, StackTrace = ex.StackTrace, InnerException = ex.InnerException?.ToString() });
            }
        }
    }
}

@page "/category/edit/{entityId:long}"

@inject ICategoryRepository _entityRepository

@attribute [Authorize(Roles = "Admin")]

@if (entity != null)
{
    <CategoryForm entity="entity" Action="@T["Action_Edit"]" onValidSubmit="Edit" isBusy="isBusy" />
}
@code {
    [Parameter] public long entityId { get; set; }
    private Category entity = new Category();
    bool isBusy = false;


    protected async override Task OnInitializedAsync()
    {
        entity = (await _entityRepository.Get(entityId)).Category;

        if (entity == null)
        {
            _navigationManager.NavigateTo("NotFound");
            return;
        }
    }

    private async Task Edit()
    {
        try
        {
            isBusy = true;
            EditCategoryVMRequest categoryVM = new()
            {
                Id = entity.Id,
                Name_ar = entity.Name_ar,
                Name_en = entity.Name_en,
                Name_fr = entity.Name_fr,
                Name_tr = entity.Name_tr,
                Name_ru = entity.Name_ru,
                Description_ar = entity.Description_ar,
                Description_en = entity.Description_en,
                Description_fr = entity.Description_fr,
                Description_tr = entity.Description_tr,
                Description_ru = entity.Description_ru,
                Image = entity.Image,
                Status = entity.Status
            };
            await _entityRepository.Edit(categoryVM);
            Toaster.Success(T["Message_Update"]);
            _navigationManager.NavigateTo("categoriesAdmin");
        }
        catch (Exception ex)
        {
            isBusy = false;

            Toaster.Error(T["Message_Error"]);
            await _homeRepository.LogToDB(new LogDTO() { Page = _navigationManager.Uri, Message = ex.Message, StackTrace = ex.StackTrace, InnerException = ex.InnerException?.ToString() });
        }
    }
}

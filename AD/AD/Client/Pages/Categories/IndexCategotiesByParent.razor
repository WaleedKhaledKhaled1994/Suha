@page "/allcategories"
@page "/allcategories/{parentId:long}"

@using SAliDantel.Shared.DTOs.Category

@inject ICategoryRepository _entityRepository

<h3 style="text-align: center;">@T["NavMenu_Categories"]</h3>
<div class="form-group">
    <a class="btn btn-info" href="category/create">@T["Action_Create"] @T["Class_Category"]</a>
    <a class="btn btn-success" href="freezedcategories">@T["Freezed_Categories"]</a>
    &nbsp;&nbsp;&nbsp;
    <span>
        <input @onchange="Search" placeholder="@T["Action_Search"]" />
        <span class="text-muted ml-5">
            @T["Action_Search_Shwoing"] @entities.Count @T["Action_Search_OutOf"] @totalAmount
        </span>
    </span>
</div>

<GenericList List="entities">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>@T["Property_Code"]</th>
                    <th>@T["Property_CategoryLevel"]</th>
                    <th>@T["Property_Name"]</th>
                    <th>@T["Property_Description"]</th>
                    <th>@T["Property_UpperCategories"]</th>
                    <th>@T["Property_Image"]</th>
                    @*<th></th>*@
                </tr>
            </thead>
            <tbody>
                @foreach (var item in entities)
                {
                    <tr>
                        <td>
                            @item.Category.Code
                        </td>
                        <td>
                            @item.Category.CategoryLevel
                        </td>
                        <td>
                            <a  @onclick="@(() =>navigation(item.Category.Id))">@_localizationDB.GetName(item)</a>
                        </td>
                        <td>
                            @_localizationDB.GetDescription(item)
                        </td>
                        <td>
                            @foreach (var category in item.UpperCategories)
                            {
                                @_localizationDB.GetName(category)
                                <span>&nbsp;</span>
                            }
                        </td>
                        <td>
                            <img class="img-fluid img-thumbnail" alt="Category Image" src="@item.Category.Image" style="height:100px; width:100px;" />
                        </td>
                        @*<td>
                            <a class="btn btn-success" href="/category/edit/@item.Category.Id">@T["Action_Edit"]</a>
                            <button class="btn btn-warning" @onclick="@(() => ShowModalFreeze(@item.Category.Id))">@T["Action_Freeze"]</button>
                            <button class="btn btn-danger" @onclick="@(() => ShowModal(@item.Category.Id))">@T["Action_Delete"]</button>
                        </td>*@
                    </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>
<SAliDantel.Client.Shared.Pagination CurrentPage="@paginationDTO.Page" SelectedPage="SelectedPage" TotalAmountPages="totalAmountOfPages"></SAliDantel.Client.Shared.Pagination>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    List<CategoryVM> entities = new List<CategoryVM>();
    [Parameter] public long parentId { get; set; } = 0;
    PaginationSearchDTO paginationDTO = new PaginationSearchDTO() { RecordsPerPage = 8 };
    private int totalAmountOfPages;
    private long totalAmount;

    protected override async Task OnInitializedAsync()
    {
        await LoadEntities();
    }

    private async Task Search(ChangeEventArgs args)
    {
        paginationDTO.SearchText = args.Value.ToString();
        await LoadEntities();
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadEntities();
    }

    private async Task LoadEntities()
    {
        var paginatedResponse = await _entityRepository.GetVMByParent(paginationDTO,parentId);
        entities = paginatedResponse.Response;
        totalAmountOfPages = paginatedResponse.TotalAmountPages;
        totalAmount = paginatedResponse.TotalAmount;
    }
    private async Task navigation(long id)
    {
         _navigationManager.NavigateTo("/allcategories/"+ id);
        LoadEntities();
    }

    //private async Task ShowModalFreeze(long id)
    //{
    //    var modal = Modal.Show<ConfirmDelete>(@T["Modal_Confirm_Freeze"]);

    //    var result = await modal.Result;

    //    if (!result.Cancelled && (result.Data is bool accepted) && accepted)
    //    {
    //        try
    //        {
    //            FreezeVMRequest categoryVM = new()
    //            {
    //                Id = id,
    //                Status = Status.Offline,
    //            };
    //            await _entityRepository.Freeze(categoryVM);
    //            await LoadEntities();
    //            Toaster.Success(T["Message_Freeze"]);
    //        }
    //        catch (Exception ex)
    //        {
    //            Toaster.Error(T["Message_Error"]);
    //            await _homeRepository.LogToDB(new LogDTO() { Page = _navigationManager.Uri, Message = ex.Message, StackTrace = ex.StackTrace, InnerException = ex.InnerException?.ToString() });
    //        }
    //    }
    //}

    //private async Task ShowModal(long id)
    //{
    //    var modal = Modal.Show<ConfirmDelete>(@T["Modal_Confirm_Delete"]);
    //    var result = await modal.Result;

    //    if (!result.Cancelled && (result.Data is bool accepted) && accepted)
    //    {
    //        try
    //        {
    //            await _entityRepository.Delete(id);
    //            await LoadEntities();
    //            Toaster.Error(T["Message_Delete"]);
    //        }
    //        catch (Exception ex)
    //        {
    //            Toaster.Error(T["Message_Error"]);
    //            await _homeRepository.LogToDB(new LogDTO() { Page = _navigationManager.Uri, Message = ex.Message, StackTrace = ex.StackTrace, InnerException = ex.InnerException?.ToString() });
    //        }
    //    }
    //}
    //private async Task CreateVM(Category entity, Status status)
    //{
    //    EditCategoryVMRequest categoryVM = new()
    //    {
    //        Id = entity.Id,
    //        Status = entity.Status
    //    };
    //    await ShowModalFreeze(categoryVM, status);
    //}
}
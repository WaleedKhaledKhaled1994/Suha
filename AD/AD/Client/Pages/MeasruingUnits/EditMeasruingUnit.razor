@page "/measruingUnit/edit/{entityId:long}"

@inject IMeasruingUnitRepository _entityRepository

@attribute [Authorize(Roles = "Admin")]

@if (entity != null)
{
    <MeasruingUnitForm entity="entity" Action="@T["Action_Edit"]" onValidSubmit="Edit" isBusy="isBusy" />
}
@code {
    [Parameter] public long entityId { get; set; }
    bool isBusy = false;
    public MeasruingUnit entity;
    protected async override Task OnInitializedAsync()
    {
        entity = await _entityRepository.Get(entityId);
        if (entity == null)
        {
            _navigationManager.NavigateTo("NotFound");
            return;
        }
    }

    private async Task Edit()
    {
        try
        {
            isBusy = true;
            EditMeasruingUnitVMRequest muVM = new()
            {
                Id = entity.Id,
                Name_ar = entity.Name_ar,
                Name_en = entity.Name_en,
                Name_fr = entity.Name_fr,
                Name_tr = entity.Name_tr,
                Name_ru = entity.Name_ru,
                Symbol = entity.Symbol,
                Status = entity.Status

            };
            await _entityRepository.Edit(muVM);
            _navigationManager.NavigateTo("measruingUnits");
            Toaster.Info(T["Message_Update"]);
        }
        catch (Exception ex)
        {
            isBusy = false;

            Toaster.Error(T["Message_Error"]);
            await _homeRepository.LogToDB(new LogDTO() { Page = _navigationManager.Uri, Message = ex.Message, StackTrace = ex.StackTrace, InnerException = ex.InnerException?.ToString() });
        }
    }
}

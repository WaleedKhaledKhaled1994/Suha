@inject ICategoryRepository _categoryRepository
@inject IStoreRepository _storeRepository
@inject IMeasruingUnitRepository _measruingUnitRepository
@inject ICurrencyRepository _currencyRepository

@attribute [Authorize(Roles = "User")]

<div class="page-content-wrapper">
    <div class="container">
        <div class="profile-wrapper-area py-3">
            <div class="card user-info-card">
                <div class="card-body p-4 d-flex align-items-center">
                    <div class="user-info">
                        <h3>@Action @T["Class_Product"]</h3>
                    </div>
                </div>
            </div>
            <div class="card user-data-card">
                <div class="card-body">
                    <EditForm Model="entity" OnValidSubmit="onTestSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>@T["Property_Store"]:</label>
                            <div>
                                <input class="form-control" @bind="@store.Name" disabled />
                            </div>
                        </div>
                        @{
                            #region Category
                            <div class="form-group">
                                <label>@T["Property_Category"]:</label>
                                <div>
                                    <select class="form-control" @onchange="@onChangeCategory">
                                        <option value="0">
                                            @T["Action_Select"]
                                        </option>
                                        @foreach (var item in Categories)
                                        {
                                            <option value="@item.Id">
                                                @_localizationDB.GetName(item)
                                            </option>
                                        }
                                    </select>
                                </div>
                            </div>
                            if (Categories_L1.Any())
                            {
                                <div class="form-group">
                                    <label>@T["Property_CategoryL1"]:</label>
                                    <div>
                                        <select class="form-control" @onchange="@onChangeCategoryL1">
                                            <option value="0">
                                                @T["Action_Select"]
                                            </option>
                                            @foreach (var item in Categories_L1)
                                            {
                                                <option value="@item.Id">
                                                    @_localizationDB.GetName(item)
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            }
                            if (Categories_L2.Any())
                            {
                                <div class="form-group">
                                    <label>@T["Property_CategoryL2"]:</label>
                                    <div>
                                        <select class="form-control" @onchange="@onChangeCategoryL2">
                                            <option value="0">
                                                @T["Action_Select"]
                                            </option>
                                            @foreach (var item in Categories_L2)
                                            {
                                                <option value="@item.Id">
                                                    @_localizationDB.GetName(item)
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            }
                            if (Categories_L3.Any())
                            {
                                <div class="form-group">
                                    <label>@T["Property_CategoryL3"]:</label>
                                    <div>
                                        <select class="form-control" @onchange="@onChangeCategoryL3">
                                            <option value="0">
                                                @T["Action_Select"]
                                            </option>
                                            @foreach (var item in Categories_L3)
                                            {
                                                <option value="@item.Id">
                                                    @_localizationDB.GetName(item)
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            }
                            if (Categories_L4.Any())
                            {
                                <div class="form-group">
                                    <label>@T["Property_CategoryL4"]:</label>
                                    <div>
                                        <select class="form-control" @onchange="@onChangeCategoryL4">
                                            <option value="0">
                                                @T["Action_Select"]
                                            </option>
                                            @foreach (var item in Categories_L4)
                                            {
                                                <option value="@item.Id">
                                                    @_localizationDB.GetName(item)
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            }
                            #endregion
                        }
                        <div class="form-group">
                            <label>@T["Property_CodeStore"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.CodeStore" />
                                <ValidationMessage For="@(() => entity.CodeStore)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Brand"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Brand" />
                                <ValidationMessage For="@(() => entity.Brand)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Name"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Name" />
                                <ValidationMessage For="@(() => entity.Name)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Description"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Description" />
                                <ValidationMessage For="@(() => entity.Description)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_MeasruingUnitId"]:</label>
                            <div>
                                <select class="form-control" @bind="@entity.MeasruingUnitId">
                                    <option value="0">
                                        @T["Action_Select"]
                                    </option>
                                    @foreach (var item in MeasruingUnits)
                                    {
                                        <option value="@item.Id">
                                            @_localizationDB.GetName(item)
                                        </option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => entity.MeasruingUnitId)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_MinValue"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.MinValue" />
                                <ValidationMessage For="@(() => entity.MinValue)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Colors"]:</label>
                            <CustomColorPicker_Parent ColorChanged="ColorChanged" />
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Currency"]:</label>
                            <Autocomplete Data="@Currencies"
                                          TextField="@((item)=>item.Code)"
                                          ValueField="@((item)=>item.Id)"
                                          SelectedValue="@entity.CurrencyId"
                                          SelectedValueChanged="@ChangeCurrenctHandler"
                                          Placeholder="" />
                            <ValidationMessage For="@(() => entity.CurrencyId)" />
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Price"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.Price" />
                                <ValidationMessage For="@(() => entity.Price)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Quantity1"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.Quantity1" />
                                <ValidationMessage For="@(() => entity.Quantity1)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Price1"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.Price1" />
                                <ValidationMessage For="@(() => entity.Price1)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Quantity2"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.Quantity2" />
                                <ValidationMessage For="@(() => entity.Quantity2)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Price2"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.Price2" />
                                <ValidationMessage For="@(() => entity.Price2)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Quantity3"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.Quantity3" />
                                <ValidationMessage For="@(() => entity.Quantity3)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Price3"]:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@entity.Price3" />
                                <ValidationMessage For="@(() => entity.Price3)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Note"]:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@entity.Note" />
                                <ValidationMessage For="@(() => entity.Note)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>@T["Property_Images"]:</label>
                            <CustomInputImage_Parent ImageChanged="ImageChanged" />
                        </div>
                        <button class="btn btn-success" type="submit">@T["Action_Save"]</button>
                        <a class="btn btn-primary" href="products">@T["Action_Back_To_List"]</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public AddProductVMRequest entity { get; set; }
    [Parameter] public string Action { get; set; }
    [Parameter] public EventCallback onValidSubmit { get; set; }
    [Parameter] public long storeId { get; set; }
    private Store store = new Store();
    bool valid = false;

    List<MeasruingUnit> MeasruingUnits = new List<MeasruingUnit>();
    List<Category> Categories = new List<Category>();
    List<Category> Categories_L1 = new List<Category>();
    List<Category> Categories_L2 = new List<Category>();
    List<Category> Categories_L3 = new List<Category>();
    List<Category> Categories_L4 = new List<Category>();

    List<Currency> Currencies = new List<Currency>();

    private long category, category_L1, category_L2, category_L3, category_L4;

    protected override async Task OnInitializedAsync()
    {
        entity.StoreId = storeId;
        entity.CategoryId = 1;
        Categories = (await _categoryRepository.Get()).Where(s => s.CategoryLevel == CategoryLevel.Category).ToList();
        MeasruingUnits = await _measruingUnitRepository.Get();
        Currencies = await _currencyRepository.Get();
        store = await _storeRepository.Get(storeId);
        entity.CurrencyId = store.CurrencyId;
    }

    private async Task onChangeCategory(ChangeEventArgs e)
    {
        var str = e.Value.ToString();
        category = long.Parse(str);

        var query = await _categoryRepository.Get();
        query = query.Where(s => s.CategoryLevel == CategoryLevel.Category_L1).ToList();
        Categories_L1 = query.Where(x => x.ParentId == category).ToList();
        StateHasChanged();
        Categories_L2.Clear(); category_L2 = 0;
        Categories_L3.Clear(); category_L3 = 0;
        Categories_L4.Clear(); category_L4 = 0;
    }
    private async Task onChangeCategoryL1(ChangeEventArgs e)
    {
        var str = e.Value.ToString();
        category_L1 = long.Parse(str);

        var query = await _categoryRepository.Get();
        query = query.Where(s => s.CategoryLevel == CategoryLevel.Category_L2).ToList();
        Categories_L2 = query.Where(x => x.ParentId == category_L1).ToList();
        Categories_L3.Clear(); category_L3 = 0;
        Categories_L4.Clear(); category_L4 = 0;
    }
    private async Task onChangeCategoryL2(ChangeEventArgs e)
    {
        var str = e.Value.ToString();
        category_L2 = long.Parse(str);

        var query = await _categoryRepository.Get();
        query = query.Where(s => s.CategoryLevel == CategoryLevel.Category_L3).ToList();
        Categories_L3 = query.Where(x => x.ParentId == category_L2).ToList();
        Categories_L4.Clear(); category_L4 = 0;
    }
    private async Task onChangeCategoryL3(ChangeEventArgs e)
    {
        var str = e.Value.ToString();
        category_L3 = long.Parse(str);

        var query = await _categoryRepository.Get();
        query = query.Where(s => s.CategoryLevel == CategoryLevel.Category_L4).ToList();
        Categories_L4 = query.Where(x => x.ParentId == category_L3).ToList();
    }
    private Task onChangeCategoryL4(ChangeEventArgs e)
    {
        var str = e.Value.ToString();
        category_L4 = long.Parse(str);
        return Task.CompletedTask;
    }

    protected void ColorChanged(List<string> colors)
    {
        entity.Colors = colors;
    }

    protected void ImageChanged(List<string> images)
    {
        entity.Images = images;
    }

    private async Task onChangeStore(long id)
    {
        entity.StoreId = id;
        var store = await _storeRepository.Get(id);
        entity.CurrencyId = store.CurrencyId;
    }

    private void ChangeCurrenctHandler(object newValue)
    {
        if (newValue != null)
            entity.CurrencyId = (long)newValue;
    }

    private async Task onTestSubmit()
    {
        if (Categories_L4.Any() && category_L4 != 0)
        {
            valid = true;
            entity.CategoryId = category_L4;
        }
        else if (Categories_L3.Any() && category_L3 != 0)
        {
            valid = true;
            entity.CategoryId = category_L3;
        }
        else if (Categories_L2.Any() && category_L2 != 0)
        {
            valid = true;
            entity.CategoryId = category_L2;
        }
        else if (Categories_L1.Any() && category_L1 != 0)
        {
            valid = true;
            entity.CategoryId = category_L1;
        }
        else if (Categories.Any() && category != 0)
        {
            valid = true;
            entity.CategoryId = category;
        }
        if (valid == false || entity.MeasruingUnitId == 0)
        {
            Toaster.Error(@T["Message_Select_err"]);
        }
        //else if ((entity.Quantity3 != 0 && entity.Price3 == 0) || (entity.Quantity2 != 0 && entity.Price2 == 0) || (entity.Quantity1 != 0 && entity.Price1 == 0))
        //{
        //    Toaster.Error(@T["Message_Quantity_err"]);
        //}
        else
        {
            await onValidSubmit.InvokeAsync();
        }
    }
}